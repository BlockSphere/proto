// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/sensor.proto

package sensorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SensorReceiver_SendSensorData_FullMethodName = "/sensor.SensorReceiver/SendSensorData"
)

// SensorReceiverClient is the client API for SensorReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorReceiverClient interface {
	SendSensorData(ctx context.Context, in *SensorDataRequest, opts ...grpc.CallOption) (*SensorDataResponse, error)
}

type sensorReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorReceiverClient(cc grpc.ClientConnInterface) SensorReceiverClient {
	return &sensorReceiverClient{cc}
}

func (c *sensorReceiverClient) SendSensorData(ctx context.Context, in *SensorDataRequest, opts ...grpc.CallOption) (*SensorDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensorDataResponse)
	err := c.cc.Invoke(ctx, SensorReceiver_SendSensorData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorReceiverServer is the server API for SensorReceiver service.
// All implementations must embed UnimplementedSensorReceiverServer
// for forward compatibility.
type SensorReceiverServer interface {
	SendSensorData(context.Context, *SensorDataRequest) (*SensorDataResponse, error)
	mustEmbedUnimplementedSensorReceiverServer()
}

// UnimplementedSensorReceiverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSensorReceiverServer struct{}

func (UnimplementedSensorReceiverServer) SendSensorData(context.Context, *SensorDataRequest) (*SensorDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSensorData not implemented")
}
func (UnimplementedSensorReceiverServer) mustEmbedUnimplementedSensorReceiverServer() {}
func (UnimplementedSensorReceiverServer) testEmbeddedByValue()                        {}

// UnsafeSensorReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorReceiverServer will
// result in compilation errors.
type UnsafeSensorReceiverServer interface {
	mustEmbedUnimplementedSensorReceiverServer()
}

func RegisterSensorReceiverServer(s grpc.ServiceRegistrar, srv SensorReceiverServer) {
	// If the following call pancis, it indicates UnimplementedSensorReceiverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SensorReceiver_ServiceDesc, srv)
}

func _SensorReceiver_SendSensorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorReceiverServer).SendSensorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorReceiver_SendSensorData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorReceiverServer).SendSensorData(ctx, req.(*SensorDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SensorReceiver_ServiceDesc is the grpc.ServiceDesc for SensorReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.SensorReceiver",
	HandlerType: (*SensorReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSensorData",
			Handler:    _SensorReceiver_SendSensorData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sensor.proto",
}

const (
	SensorDataService_GetSensorHistory_FullMethodName    = "/sensor.SensorDataService/GetSensorHistory"
	SensorDataService_GetLastSensorValues_FullMethodName = "/sensor.SensorDataService/GetLastSensorValues"
)

// SensorDataServiceClient is the client API for SensorDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorDataServiceClient interface {
	GetSensorHistory(ctx context.Context, in *SensorHistoryRequest, opts ...grpc.CallOption) (*SensorHistoryResponse, error)
	GetLastSensorValues(ctx context.Context, in *SensorLastValuesRequest, opts ...grpc.CallOption) (*SensorLastValuesResponse, error)
}

type sensorDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorDataServiceClient(cc grpc.ClientConnInterface) SensorDataServiceClient {
	return &sensorDataServiceClient{cc}
}

func (c *sensorDataServiceClient) GetSensorHistory(ctx context.Context, in *SensorHistoryRequest, opts ...grpc.CallOption) (*SensorHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensorHistoryResponse)
	err := c.cc.Invoke(ctx, SensorDataService_GetSensorHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorDataServiceClient) GetLastSensorValues(ctx context.Context, in *SensorLastValuesRequest, opts ...grpc.CallOption) (*SensorLastValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensorLastValuesResponse)
	err := c.cc.Invoke(ctx, SensorDataService_GetLastSensorValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorDataServiceServer is the server API for SensorDataService service.
// All implementations must embed UnimplementedSensorDataServiceServer
// for forward compatibility.
type SensorDataServiceServer interface {
	GetSensorHistory(context.Context, *SensorHistoryRequest) (*SensorHistoryResponse, error)
	GetLastSensorValues(context.Context, *SensorLastValuesRequest) (*SensorLastValuesResponse, error)
	mustEmbedUnimplementedSensorDataServiceServer()
}

// UnimplementedSensorDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSensorDataServiceServer struct{}

func (UnimplementedSensorDataServiceServer) GetSensorHistory(context.Context, *SensorHistoryRequest) (*SensorHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorHistory not implemented")
}
func (UnimplementedSensorDataServiceServer) GetLastSensorValues(context.Context, *SensorLastValuesRequest) (*SensorLastValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastSensorValues not implemented")
}
func (UnimplementedSensorDataServiceServer) mustEmbedUnimplementedSensorDataServiceServer() {}
func (UnimplementedSensorDataServiceServer) testEmbeddedByValue()                           {}

// UnsafeSensorDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorDataServiceServer will
// result in compilation errors.
type UnsafeSensorDataServiceServer interface {
	mustEmbedUnimplementedSensorDataServiceServer()
}

func RegisterSensorDataServiceServer(s grpc.ServiceRegistrar, srv SensorDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedSensorDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SensorDataService_ServiceDesc, srv)
}

func _SensorDataService_GetSensorHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorDataServiceServer).GetSensorHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorDataService_GetSensorHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorDataServiceServer).GetSensorHistory(ctx, req.(*SensorHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorDataService_GetLastSensorValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorLastValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorDataServiceServer).GetLastSensorValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorDataService_GetLastSensorValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorDataServiceServer).GetLastSensorValues(ctx, req.(*SensorLastValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SensorDataService_ServiceDesc is the grpc.ServiceDesc for SensorDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.SensorDataService",
	HandlerType: (*SensorDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSensorHistory",
			Handler:    _SensorDataService_GetSensorHistory_Handler,
		},
		{
			MethodName: "GetLastSensorValues",
			Handler:    _SensorDataService_GetLastSensorValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sensor.proto",
}
